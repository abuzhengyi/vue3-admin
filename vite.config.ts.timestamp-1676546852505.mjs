// vite.config.ts
import { resolve } from "path";
import { loadEnv } from "file:///E:/vue3-admin/node_modules/vite/dist/node/index.js";
import vue from "file:///E:/vue3-admin/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import { createHtmlPlugin } from "file:///E:/vue3-admin/node_modules/vite-plugin-html/dist/index.mjs";
import AutoImport from "file:///E:/vue3-admin/node_modules/unplugin-auto-import/dist/vite.js";
import Components from "file:///E:/vue3-admin/node_modules/unplugin-vue-components/dist/vite.mjs";
import { ElementPlusResolver } from "file:///E:/vue3-admin/node_modules/unplugin-vue-components/dist/resolvers.mjs";
import Icons from "file:///E:/vue3-admin/node_modules/unplugin-icons/dist/vite.mjs";
import IconsResolver from "file:///E:/vue3-admin/node_modules/unplugin-icons/dist/resolver.mjs";
var __vite_injected_original_dirname = "E:\\vue3-admin";
var pathResolve = (dir = "") => resolve(__vite_injected_original_dirname, ".", dir);
var vite_config_default = ({ command, mode }) => {
  const dev = mode === "development";
  const { VITE_APP_TITLE, VITE_BASE_URL, VITE_PROXY_SERVER } = loadEnv(mode, process.cwd());
  return {
    base: "./",
    resolve: {
      alias: {
        "@": pathResolve("src")
      },
      extensions: [".mjs", ".js", ".ts", ".jsx", ".tsx", ".json", ".scss"]
    },
    server: dev && VITE_PROXY_SERVER === "true" ? {
      port: 80,
      proxy: {
        "/api": {
          target: VITE_BASE_URL,
          rewrite: (path) => path.replace(/^\/api/, ""),
          changeOrigin: true
        }
      },
      host: "0.0.0.0",
      cors: true
    } : {},
    plugins: [
      vue(),
      createHtmlPlugin({
        entry: "src/main.ts",
        inject: {
          data: {
            title: VITE_APP_TITLE,
            logo: "src/assets/images/common/logo.svg"
          }
        }
      }),
      AutoImport({
        imports: ["vue"],
        resolvers: [ElementPlusResolver()],
        dts: pathResolve("types/auto-imports.d.ts")
      }),
      Components({
        resolvers: [
          ElementPlusResolver(),
          IconsResolver({
            enabledCollections: ["ep"],
            prefix: "Icon"
          })
        ],
        dts: pathResolve("types/components.d.ts")
      }),
      Icons({
        autoInstall: true
      })
    ],
    css: {
      modules: {
        scopeBehaviour: "local"
      },
      preprocessorOptions: {
        scss: {
          additionalData: `
            @use "@/styles/element-theme.scss" as *;
            @use "@/styles/common.scss" as *;
          `,
          javascriptEnabled: true,
          charset: false
        }
      }
    },
    build: {
      target: "es2015",
      sourcemap: false,
      brotliSize: false,
      chunkSizeWarningLimit: 2e3,
      cssTarget: "chrome61",
      cssCodeSplit: true,
      assetsInlineLimit: 4096,
      rollupOptions: {
        output: {
          manualChunks: {}
        }
      }
    }
  };
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
